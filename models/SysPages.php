<?php

/**
 * SysPages
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class SysPages extends BaseSysPages
{
	public function setUp() {
		$this->hasOne('SysPages as Top', array(
				'local' => 'id_top',
				'foreign' => 'id'));

		$this->hasMany('SysPages as Children', array(
				'local' => 'id',
				'foreign' => 'id_top'));

		$this->hasMany('SysAliases as Aliases', array(
				'local' => 'id',
				'foreign' => 'id_page'));

		$this->hasMany('SiteContents as Contents', array(
				'local' => 'id',
				'foreign' => 'id_page'));

		$this->hasMany('SiteGalleries as Galleries', array(
				'local' => 'id',
				'foreign' => 'id_page'));
	}

	/**
	 * Questa funzione genera un url SEO-friendly.<br/>
	 * Usare inserendo il nome della pagina, il codice della lingua e un numero
	 * qualsiasi di argomenti.<br/>
	 * Ogni oggetto o array verrà considerato un oggetto Doctrine e si tenterà
	 * di usare l'attributo <b>slug</b> o, se non presente, <b>id</b>.<br/>
	 * <br/>
	 * <b>Il parametro $lang serve solamente per la traduzione della pagina,
	 * tutti i parametri si intendono già nella lingua giusta.</b>
	 *
	 * @param string $page nome della pagina di cui si vuole ottenere il link,
	 * suddivisa da - per gerarchia di pagine
	 * @param string $lang codice a 2 caratteri della lingua
	 * @param mixed $args altri argomenti
	 *
	 * @return string URL seo-friendly e localizzato
	 */
	public static function getLink($page, $lang = null)
	{
		$args = func_get_args();
		$link = array();
		$tree = explode('-', $page);
		foreach($tree as $section)
		{
			$alias = SysAliases::getLocalizedPageName($section, $lang);
			$link[] = $alias ? $alias : $section;
		}

		for($i = 2; $i < count($args); $i++)
		{
			// Se è un'oggetto o un array assumo che sia un parametro da cui prendere lo slug.
			if (is_object($args[$i]))
				$args[$i] = (isset($args[$i]->slug) && $args[$i]->slug) ? $args[$i]->slug : $args[$i]->id;
			else if (is_array($args[$i]))
				$args[$i] = (isset($args[$i]['slug']) && $args[$i]['slug']) ? $args[$i]['slug'] : $args[$i]['id'];

			// Sostituisco i - con _ per evitare di considerare argomenti unici come separati.
			$link[] = str_replace('-', '_', $args[$i]);
		}

		$url = implode('-', $link);
		return urlencode(($url ? $url : $page) . '.html');
	}

	public static function getName($page, $lang = null)
	{
		$name = SysAliases::getLocalizedPageName($page, $lang);
		$name = $name ? $name : $page;
		$name = str_replace(array('-','_'), array(' ', ' '), $name);
		return $name;
	}

	public function getTree()
	{
		$tree = '';
		if ($this->id_top)
			$tree = $this->Top->Tree.'/';

		return $tree . str_replace(' ', '', $this->data['name']);
	}

	public function getTreeLink()
	{
		$tree = '';
		if ($this->id_top)
			$tree = $this->Top->Tree.'-';

		return $tree . str_replace(' ', '', $this->data['name']);
	}
}